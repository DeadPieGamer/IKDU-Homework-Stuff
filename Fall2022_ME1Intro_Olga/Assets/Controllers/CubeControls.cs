//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Controllers/CubeControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CubeControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CubeControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CubeControls"",
    ""maps"": [
        {
            ""name"": ""Air_Map"",
            ""id"": ""9f3440d1-faa9-43d6-abaf-97eace254b58"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bf2267b4-1b7b-433b-b844-65c420891bf8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GainEXP"",
                    ""type"": ""Button"",
                    ""id"": ""1f7b5028-657f-492f-8796-0983a09536f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LevelUp"",
                    ""type"": ""Button"",
                    ""id"": ""67b11469-55de-407a-a7e4-ab188c74eb6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""83fb5304-b9ef-4e28-bfb9-c272a15ac303"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""e9cf8117-8ebb-4626-ac03-dbf61027acac"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""67d20f61-b80b-448b-b51b-7deed8b9112c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""c316a577-56cc-4877-a557-906289a647ba"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""789e9b40-355e-439a-abe9-213d79311329"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""33971523-8edb-4888-99ca-a7d6c02b6648"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""663448e2-e91b-4128-a930-66568be85e7c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""fdc906fa-7e50-4320-a6c9-6bfe2976e5f7"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""32e331bf-3b63-4b94-93a7-2fbfbe300033"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7bc478d7-6c7f-4114-b07a-f1087d7d5198"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""89fae994-deae-4b75-ad4b-998abe160370"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""245cd8f4-2030-41a8-8cd4-67c6ebf34d84"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""76d10da9-2e0c-43f5-ae33-ac5bbc2587c9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""984a8949-ad7d-44ce-8dcf-c29618c2564b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BasicControls"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9100c5d1-2695-4176-8578-665d42ef6743"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GainEXP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""374bba43-8903-4c88-86ed-069e5c89bc31"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BasicControls"",
            ""bindingGroup"": ""BasicControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Air_Map
        m_Air_Map = asset.FindActionMap("Air_Map", throwIfNotFound: true);
        m_Air_Map_Movement = m_Air_Map.FindAction("Movement", throwIfNotFound: true);
        m_Air_Map_GainEXP = m_Air_Map.FindAction("GainEXP", throwIfNotFound: true);
        m_Air_Map_LevelUp = m_Air_Map.FindAction("LevelUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Air_Map
    private readonly InputActionMap m_Air_Map;
    private IAir_MapActions m_Air_MapActionsCallbackInterface;
    private readonly InputAction m_Air_Map_Movement;
    private readonly InputAction m_Air_Map_GainEXP;
    private readonly InputAction m_Air_Map_LevelUp;
    public struct Air_MapActions
    {
        private @CubeControls m_Wrapper;
        public Air_MapActions(@CubeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Air_Map_Movement;
        public InputAction @GainEXP => m_Wrapper.m_Air_Map_GainEXP;
        public InputAction @LevelUp => m_Wrapper.m_Air_Map_LevelUp;
        public InputActionMap Get() { return m_Wrapper.m_Air_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Air_MapActions set) { return set.Get(); }
        public void SetCallbacks(IAir_MapActions instance)
        {
            if (m_Wrapper.m_Air_MapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMovement;
                @GainEXP.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @GainEXP.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @GainEXP.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @LevelUp.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
                @LevelUp.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
                @LevelUp.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
            }
            m_Wrapper.m_Air_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @GainEXP.started += instance.OnGainEXP;
                @GainEXP.performed += instance.OnGainEXP;
                @GainEXP.canceled += instance.OnGainEXP;
                @LevelUp.started += instance.OnLevelUp;
                @LevelUp.performed += instance.OnLevelUp;
                @LevelUp.canceled += instance.OnLevelUp;
            }
        }
    }
    public Air_MapActions @Air_Map => new Air_MapActions(this);
    private int m_BasicControlsSchemeIndex = -1;
    public InputControlScheme BasicControlsScheme
    {
        get
        {
            if (m_BasicControlsSchemeIndex == -1) m_BasicControlsSchemeIndex = asset.FindControlSchemeIndex("BasicControls");
            return asset.controlSchemes[m_BasicControlsSchemeIndex];
        }
    }
    public interface IAir_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnGainEXP(InputAction.CallbackContext context);
        void OnLevelUp(InputAction.CallbackContext context);
    }
}
