//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Controllers/CubeControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CubeControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CubeControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CubeControls"",
    ""maps"": [
        {
            ""name"": ""Air_Map"",
            ""id"": ""9f3440d1-faa9-43d6-abaf-97eace254b58"",
            ""actions"": [
                {
                    ""name"": ""GainEXP"",
                    ""type"": ""Button"",
                    ""id"": ""1f7b5028-657f-492f-8796-0983a09536f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LevelUp"",
                    ""type"": ""Button"",
                    ""id"": ""67b11469-55de-407a-a7e4-ab188c74eb6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AnyInput"",
                    ""type"": ""Button"",
                    ""id"": ""1bef6543-4573-4268-b612-e8644ae9eea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FrontRotate"",
                    ""type"": ""Value"",
                    ""id"": ""1fa0ba88-3069-4ed7-8bec-7d99e89bd4c9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SideRotate"",
                    ""type"": ""Value"",
                    ""id"": ""b09283b8-fc37-4f6f-b0c0-5697c679203e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""a4fadda1-1bea-4804-99e8-674c9ecabb16"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9100c5d1-2695-4176-8578-665d42ef6743"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GainEXP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""374bba43-8903-4c88-86ed-069e5c89bc31"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LevelUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""454bd477-8f60-45c9-a6cf-b8c9030a85fa"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AnyInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""a0e1b167-5340-4701-9de3-06918772be62"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""05edc090-771a-423a-ba92-4bb44965745d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1a2439e2-700b-49dc-993d-85336c45f037"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""4d8dd22c-9b81-4ca3-9753-4ec5af5513b9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e3105399-4667-47b2-857e-c8845a6d5ff5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c4f80782-a8d1-49c3-9ecb-64db607011a2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""0e7546c5-aff1-4bfb-a742-b0b0d0141636"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ada989bc-a5ea-440b-9213-82c673d9e5b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""31660164-53c2-4dda-849e-3c19b4e0f134"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""5dee46e7-544e-4d9a-9b95-2b091983edba"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""758f339a-8d06-47b2-9518-78dbd20b79e0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9cac36b9-0c12-473b-b7e7-64eba3683249"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""SpSh"",
                    ""id"": ""b0ebe4fb-4433-4738-be65-0a9905755097"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3e631280-2d78-493a-8997-eac22860d3e4"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8ce31bd4-f92f-46e9-a714-c2aac70731b5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""SpCtrl"",
                    ""id"": ""f8bd6763-476b-4f51-9617-89044f2d1cb5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ffcadf38-6916-4186-92f3-5e4e7aa815a0"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""db68dbd1-9bba-4fa0-bd93-aeca89f75282"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BasicControls"",
            ""bindingGroup"": ""BasicControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Air_Map
        m_Air_Map = asset.FindActionMap("Air_Map", throwIfNotFound: true);
        m_Air_Map_GainEXP = m_Air_Map.FindAction("GainEXP", throwIfNotFound: true);
        m_Air_Map_LevelUp = m_Air_Map.FindAction("LevelUp", throwIfNotFound: true);
        m_Air_Map_AnyInput = m_Air_Map.FindAction("AnyInput", throwIfNotFound: true);
        m_Air_Map_FrontRotate = m_Air_Map.FindAction("FrontRotate", throwIfNotFound: true);
        m_Air_Map_SideRotate = m_Air_Map.FindAction("SideRotate", throwIfNotFound: true);
        m_Air_Map_MoveForward = m_Air_Map.FindAction("MoveForward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Air_Map
    private readonly InputActionMap m_Air_Map;
    private IAir_MapActions m_Air_MapActionsCallbackInterface;
    private readonly InputAction m_Air_Map_GainEXP;
    private readonly InputAction m_Air_Map_LevelUp;
    private readonly InputAction m_Air_Map_AnyInput;
    private readonly InputAction m_Air_Map_FrontRotate;
    private readonly InputAction m_Air_Map_SideRotate;
    private readonly InputAction m_Air_Map_MoveForward;
    public struct Air_MapActions
    {
        private @CubeControls m_Wrapper;
        public Air_MapActions(@CubeControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GainEXP => m_Wrapper.m_Air_Map_GainEXP;
        public InputAction @LevelUp => m_Wrapper.m_Air_Map_LevelUp;
        public InputAction @AnyInput => m_Wrapper.m_Air_Map_AnyInput;
        public InputAction @FrontRotate => m_Wrapper.m_Air_Map_FrontRotate;
        public InputAction @SideRotate => m_Wrapper.m_Air_Map_SideRotate;
        public InputAction @MoveForward => m_Wrapper.m_Air_Map_MoveForward;
        public InputActionMap Get() { return m_Wrapper.m_Air_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Air_MapActions set) { return set.Get(); }
        public void SetCallbacks(IAir_MapActions instance)
        {
            if (m_Wrapper.m_Air_MapActionsCallbackInterface != null)
            {
                @GainEXP.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @GainEXP.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @GainEXP.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnGainEXP;
                @LevelUp.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
                @LevelUp.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
                @LevelUp.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnLevelUp;
                @AnyInput.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnAnyInput;
                @AnyInput.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnAnyInput;
                @AnyInput.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnAnyInput;
                @FrontRotate.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnFrontRotate;
                @FrontRotate.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnFrontRotate;
                @FrontRotate.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnFrontRotate;
                @SideRotate.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnSideRotate;
                @SideRotate.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnSideRotate;
                @SideRotate.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnSideRotate;
                @MoveForward.started -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_Air_MapActionsCallbackInterface.OnMoveForward;
            }
            m_Wrapper.m_Air_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GainEXP.started += instance.OnGainEXP;
                @GainEXP.performed += instance.OnGainEXP;
                @GainEXP.canceled += instance.OnGainEXP;
                @LevelUp.started += instance.OnLevelUp;
                @LevelUp.performed += instance.OnLevelUp;
                @LevelUp.canceled += instance.OnLevelUp;
                @AnyInput.started += instance.OnAnyInput;
                @AnyInput.performed += instance.OnAnyInput;
                @AnyInput.canceled += instance.OnAnyInput;
                @FrontRotate.started += instance.OnFrontRotate;
                @FrontRotate.performed += instance.OnFrontRotate;
                @FrontRotate.canceled += instance.OnFrontRotate;
                @SideRotate.started += instance.OnSideRotate;
                @SideRotate.performed += instance.OnSideRotate;
                @SideRotate.canceled += instance.OnSideRotate;
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
            }
        }
    }
    public Air_MapActions @Air_Map => new Air_MapActions(this);
    private int m_BasicControlsSchemeIndex = -1;
    public InputControlScheme BasicControlsScheme
    {
        get
        {
            if (m_BasicControlsSchemeIndex == -1) m_BasicControlsSchemeIndex = asset.FindControlSchemeIndex("BasicControls");
            return asset.controlSchemes[m_BasicControlsSchemeIndex];
        }
    }
    public interface IAir_MapActions
    {
        void OnGainEXP(InputAction.CallbackContext context);
        void OnLevelUp(InputAction.CallbackContext context);
        void OnAnyInput(InputAction.CallbackContext context);
        void OnFrontRotate(InputAction.CallbackContext context);
        void OnSideRotate(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
    }
}
